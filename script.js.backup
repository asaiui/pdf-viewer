// PDF.jsの設定
pdfjsLib.GlobalWorkerOptions.workerSrc =
    'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

class ISCPDFViewer {
    constructor() {
        this.pdf = null;
        this.currentPage = 1;
        this.totalPages = 0;
        this.scale = 1.0;
        this.canvas = document.getElementById('pdfCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.pageInput = document.getElementById('pageInput');
        this.totalPagesSpan = document.getElementById('totalPages');
        this.sidebarTotalPages = document.getElementById('sidebarTotalPages');
        this.loadingIndicator = document.getElementById('loadingIndicator');
        this.loadStatus = document.getElementById('loadStatus');
        this.progressFill = document.getElementById('progressFill');
        this.progressText = document.getElementById('progressText');
        this.zoomDisplay = document.getElementById('zoomDisplay');
        this.zoomLevelIndicator = document.getElementById('zoomLevelIndicator');
        this.pdfViewerContainer = document.getElementById('pdfViewerContainer');

        // レンダリング制御用
        this.currentRenderTask = null;
        this.renderQueue = [];
        this.isRendering = false;
        this.renderTimeout = null;

        // ズーム・全画面制御用
        this.baseScale = 1.0;
        this.currentZoom = 1.2; // 初期表示を20%大きく
        this.isFullscreen = false;
        this.isDragging = false;
        this.dragStart = { x: 0, y: 0 };
        this.canvasPosition = { x: 0, y: 0 };

        this.initializeEventListeners();
        this.initializeMobileMenu();
        this.loadPDF();
    }

    async loadPDF() {
        try {
            this.updateLoadStatus('📥 PDFファイルを取得中...');
            this.updateProgress(0, '初期化中...');

            // 実際のPDFファイルを読み込み（信頼性重視の設定）
            const pdfUrl = 'pdf/250307_学校案内2026最終データ_A3見開き_情報科学専門学校様 (1).pdf';
            
            // より確実な読み込み設定
            const loadingTask = pdfjsLib.getDocument({
                url: pdfUrl,
                // 基本的な設定のみ使用（互換性重視）
                disableRange: false,
                disableStream: false,
                disableAutoFetch: false, // 自動フェッチを有効化
                cMapPacked: true,
                // タイムアウト設定
                httpHeaders: {
                    'Cache-Control': 'no-cache'
                },
                // より大きなキャッシュサイズ
                maxImageSize: 4096 * 4096,
                // エラー耐性を向上
                stopAtErrors: false
            });

            // プログレス表示
            loadingTask.onProgress = (progress) => {
                if (progress.total > 0) {
                    const percent = Math.round((progress.loaded / progress.total) * 100);
                    this.updateLoadStatus(`📥 PDFファイルを取得中... (${percent}%)`);
                    this.updateProgress(percent * 0.8, `ダウンロード中... ${percent}%`); // 80%までをダウンロードに割り当て
                }
            };

            // タイムアウト付きで読み込み
            const timeoutPromise = new Promise((_, reject) => 
                setTimeout(() => reject(new Error('PDF読み込みタイムアウト')), 30000)
            );

            this.pdf = await Promise.race([loadingTask.promise, timeoutPromise]);
            this.totalPages = this.pdf.numPages;
            this.totalPagesSpan.textContent = this.totalPages;
            this.sidebarTotalPages.textContent = `${this.totalPages}ページ`;

            this.updateProgress(85, 'PDF解析完了');
            this.updateLoadStatus('🎨 ページを描画中...');

            // 最初のページを即座にレンダリング
            await this.renderPage(this.currentPage);
            this.updateControls();
            this.updateZoomDisplay();

            this.updateProgress(95, 'レンダリング完了');

            // UIの表示切り替え
            setTimeout(() => {
                this.updateProgress(100, '読み込み完了');
                
                setTimeout(() => {
                    this.loadingIndicator.style.display = 'none';
                    this.canvas.style.display = 'block';
                    this.canvas.classList.add('fade-in');
                }, 300);
            }, 200);

            this.updateLoadStatus('✅ 学校案内PDFを表示中');

            // バックグラウンドタスクは遅延実行（メイン読み込みの負荷を軽減）
            setTimeout(() => {
                this.preloadAdjacentPages();
                this.analyzePDFContent();
            }, 1000);

        } catch (error) {
            console.error('PDF読み込みエラー:', error);
            
            // エラータイプに応じてメッセージを変更
            let errorMessage = 'PDFの読み込みに失敗しました。';
            if (error.message.includes('タイムアウト')) {
                errorMessage = 'PDF読み込みがタイムアウトしました。ネットワーク接続を確認してください。';
            } else if (error.message.includes('404') || error.message.includes('Not Found')) {
                errorMessage = 'PDFファイルが見つかりません。ファイルパスを確認してください。';
            } else if (error.message.includes('CORS')) {
                errorMessage = 'PDFファイルのアクセス権限がありません。';
            }
            
            this.showError(errorMessage + ' デモ表示に切り替えます。');
            this.showDemoContent();
        }
    }

    // PDFの内容を分析して実際のページ構成を把握（軽量版）
    async analyzePDFContent() {
        if (!this.pdf) return;

        console.log('PDFの内容を分析中...');
        const pageAnalysis = [];

        try {
            // 分析ページ数を減らして負荷軽減（最初の5ページのみ）
            const maxPagesToAnalyze = Math.min(this.totalPages, 5);
            
            for (let pageNum = 1; pageNum <= maxPagesToAnalyze; pageNum++) {
                try {
                    const page = await this.pdf.getPage(pageNum);
                    
                    // テキスト抽出をタイムアウト付きで実行
                    const textPromise = page.getTextContent();
                    const timeoutPromise = new Promise((_, reject) => 
                        setTimeout(() => reject(new Error('テキスト抽出タイムアウト')), 5000)
                    );
                    
                    const textContent = await Promise.race([textPromise, timeoutPromise]);
                    
                    // テキストを抽出（最大1000文字まで）
                    const text = textContent.items
                        .map(item => item.str)
                        .join(' ')
                        .substring(0, 1000);
                    
                    // ページの特徴を分析
                    const analysis = this.analyzePageContent(pageNum, text);
                    pageAnalysis.push(analysis);
                    
                    console.log(`ページ ${pageNum}:`, analysis);
                    
                } catch (error) {
                    console.warn(`ページ ${pageNum} の分析に失敗:`, error);
                    // エラーが発生してもデフォルト分析結果を追加
                    pageAnalysis.push({
                        pageNumber: pageNum,
                        type: pageNum === 1 ? 'cover' : 'unknown',
                        title: pageNum === 1 ? '表紙' : `ページ ${pageNum}`,
                        keywords: [],
                        textLength: 0
                    });
                }
            }

            // 分析結果をログ出力
            console.log('PDF分析結果:', pageAnalysis);
            
            // 実際の構成に基づいて目次を動的に更新
            this.updateTableOfContents(pageAnalysis);

        } catch (error) {
            console.error('PDF内容分析エラー:', error);
        }
    }

    // ページ内容の特徴を分析
    analyzePageContent(pageNum, text) {
        const analysis = {
            pageNumber: pageNum,
            type: 'unknown',
            title: '',
            keywords: [],
            textLength: text.length
        };

        // テキストを小文字に変換して解析
        const lowerText = text.toLowerCase();

        // ページタイプの判定
        if (pageNum === 1) {
            analysis.type = 'cover';
            analysis.title = '表紙';
        } else if (lowerText.includes('目次') || lowerText.includes('contents')) {
            analysis.type = 'toc';
            analysis.title = '目次';
        } else if (lowerText.includes('学校長') || lowerText.includes('校長') || lowerText.includes('あいさつ')) {
            analysis.type = 'greeting';
            analysis.title = '学校長あいさつ';
        } else if (lowerText.includes('魅力') || lowerText.includes('特色') || lowerText.includes('特徴')) {
            analysis.type = 'features';
            analysis.title = 'ISCの魅力';
        } else if (lowerText.includes('大学') && lowerText.includes('違い')) {
            analysis.type = 'comparison';
            analysis.title = '大学との違い';
        } else if (lowerText.includes('情報セキュリティ')) {
            analysis.type = 'department';
            analysis.title = '情報セキュリティ学科';
        } else if (lowerText.includes('ai') || lowerText.includes('人工知能')) {
            analysis.type = 'department';
            analysis.title = '実践AI科';
        } else if (lowerText.includes('システム') && lowerText.includes('先端')) {
            analysis.type = 'department';
            analysis.title = '先端ITシステム科';
        } else if (lowerText.includes('情報処理')) {
            analysis.type = 'department';
            analysis.title = '情報処理科';
        } else if (lowerText.includes('iot')) {
            analysis.type = 'department';
            analysis.title = '実践IoT科';
        } else if (lowerText.includes('web') || lowerText.includes('ウェブ')) {
            analysis.type = 'department';
            analysis.title = 'Web技術科';
        } else if (lowerText.includes('ビジネス')) {
            analysis.type = 'department';
            analysis.title = 'ビジネス科';
        } else if (lowerText.includes('資格')) {
            analysis.type = 'support';
            analysis.title = '資格取得サポート';
        } else if (lowerText.includes('就職')) {
            analysis.type = 'support';
            analysis.title = '就職サポート';
        } else if (lowerText.includes('卒業生') || lowerText.includes('先輩')) {
            analysis.type = 'graduates';
            analysis.title = '卒業生の声';
        } else if (lowerText.includes('施設') || lowerText.includes('設備')) {
            analysis.type = 'facilities';
            analysis.title = '施設・設備';
        } else if (lowerText.includes('キャンパス') || lowerText.includes('学生生活')) {
            analysis.type = 'campus';
            analysis.title = 'キャンパスライフ';
        } else if (lowerText.includes('学費') || lowerText.includes('入学')) {
            analysis.type = 'admission';
            analysis.title = '入学・学費';
        } else if (lowerText.includes('アクセス') || lowerText.includes('交通')) {
            analysis.type = 'access';
            analysis.title = 'アクセス';
        }

        // キーワード抽出
        const keywords = ['情報', '技術', 'IT', 'AI', 'システム', 'セキュリティ', 'プログラミング', 'Web', 'IoT', 'ビジネス'];
        analysis.keywords = keywords.filter(keyword => lowerText.includes(keyword.toLowerCase()));

        return analysis;
    }

    // 分析結果に基づいて目次を動的に更新
    updateTableOfContents(pageAnalysis) {
        console.log('目次を動的に更新中...');
        
        // 分析結果をタイプ別にグループ化
        const groupedPages = {
            introduction: [],
            departments: [],
            support: [],
            facilities: [],
            admission: []
        };

        pageAnalysis.forEach(page => {
            switch (page.type) {
                case 'cover':
                case 'toc':
                case 'greeting':
                case 'features':
                case 'comparison':
                    groupedPages.introduction.push(page);
                    break;
                case 'department':
                    groupedPages.departments.push(page);
                    break;
                case 'support':
                case 'graduates':
                    groupedPages.support.push(page);
                    break;
                case 'facilities':
                case 'campus':
                    groupedPages.facilities.push(page);
                    break;
                case 'admission':
                case 'access':
                    groupedPages.admission.push(page);
                    break;
            }
        });

        // 検出されたページ情報を元に目次リンクを更新
        this.updateTocLinks(groupedPages);
    }

    // 目次リンクを実際のページ番号で更新
    updateTocLinks(groupedPages) {
        // 学校紹介セクションの更新
        const introLinks = document.querySelectorAll('.toc-section:first-child .toc-link');
        groupedPages.introduction.forEach((page, index) => {
            if (introLinks[index]) {
                introLinks[index].setAttribute('data-page', page.pageNumber);
                if (page.title) {
                    introLinks[index].textContent = page.title;
                }
            }
        });

        // 学科・コース紹介セクションの更新
        const deptLinks = document.querySelectorAll('.toc-section:nth-child(2) .toc-link');
        groupedPages.departments.forEach((page, index) => {
            if (deptLinks[index]) {
                deptLinks[index].setAttribute('data-page', page.pageNumber);
                if (page.title) {
                    deptLinks[index].textContent = page.title;
                }
            }
        });

        // サポート体制セクションの更新
        const supportLinks = document.querySelectorAll('.toc-section:nth-child(3) .toc-link');
        groupedPages.support.forEach((page, index) => {
            if (supportLinks[index]) {
                supportLinks[index].setAttribute('data-page', page.pageNumber);
                if (page.title) {
                    supportLinks[index].textContent = page.title;
                }
            }
        });

        // 施設・環境セクションの更新
        const facilityLinks = document.querySelectorAll('.toc-section:nth-child(4) .toc-link');
        groupedPages.facilities.forEach((page, index) => {
            if (facilityLinks[index]) {
                facilityLinks[index].setAttribute('data-page', page.pageNumber);
                if (page.title) {
                    facilityLinks[index].textContent = page.title;
                }
            }
        });

        // 入学情報セクションの更新
        const admissionLinks = document.querySelectorAll('.toc-section:nth-child(5) .toc-link');
        groupedPages.admission.forEach((page, index) => {
            if (admissionLinks[index]) {
                admissionLinks[index].setAttribute('data-page', page.pageNumber);
                if (page.title) {
                    admissionLinks[index].textContent = page.title;
                }
            }
        });

        console.log('目次の更新が完了しました');
    }

    // 隣接ページのプリロード（軽量版）
    async preloadAdjacentPages() {
        if (!this.pdf) return;

        // 次のページのみプリロード（負荷軽減）
        const pagesToPreload = [];
        
        if (this.currentPage < this.totalPages) {
            pagesToPreload.push(this.currentPage + 1);
        }

        // 非同期でプリロード（UIをブロックしない、タイムアウト付き）
        pagesToPreload.forEach(async (pageNum) => {
            try {
                const pagePromise = this.pdf.getPage(pageNum);
                const timeoutPromise = new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('プリロードタイムアウト')), 3000)
                );
                
                await Promise.race([pagePromise, timeoutPromise]);
                console.log(`ページ ${pageNum} をプリロードしました`);
            } catch (error) {
                console.warn(`ページ ${pageNum} のプリロードに失敗:`, error);
            }
        });
    }

    async renderPage(pageNumber = this.currentPage, forceRender = false) {
        if (!this.pdf) return;

        // 既に同じページをレンダリング中の場合はスキップ
        if (!forceRender && this.isRendering && this.currentRenderTask && this.currentRenderTask.pageNumber === pageNumber) {
            return;
        }

        // 進行中のレンダリングをキャンセル
        if (this.currentRenderTask) {
            this.currentRenderTask.cancel();
        }

        this.isRendering = true;

        try {
            // レンダリング開始時間を記録（パフォーマンス測定用）
            const startTime = performance.now();
            
            const page = await this.pdf.getPage(pageNumber);
            
            // キャンセルチェック
            if (!this.isRendering) return;

            const container = document.getElementById('pdfViewerContainer');
            const containerWidth = container.clientWidth - 20;
            const containerHeight = container.clientHeight - 20;

            const viewport = page.getViewport({
                scale: 1.0
            });

            // 自動スケール計算（より大きく表示するよう改善）
            const scaleWidth = containerWidth / viewport.width;
            const scaleHeight = containerHeight / viewport.height;
            // 幅基準での拡大表示（読みやすさを優先）
            this.baseScale = Math.max(scaleWidth * 1.1, Math.min(scaleWidth, scaleHeight) * 1.2);
            this.scale = this.baseScale * this.currentZoom;

            const scaledViewport = page.getViewport({
                scale: this.scale
            });

            // Canvas解像度を高める（Retina対応）
            const outputScale = window.devicePixelRatio || 1;
            this.canvas.width = Math.floor(scaledViewport.width * outputScale);
            this.canvas.height = Math.floor(scaledViewport.height * outputScale);
            this.canvas.style.width = Math.floor(scaledViewport.width) + 'px';
            this.canvas.style.height = Math.floor(scaledViewport.height) + 'px';

            const transform = outputScale !== 1 ? [outputScale, 0, 0, outputScale, 0, 0] : null;

            const renderContext = {
                canvasContext: this.ctx,
                viewport: scaledViewport,
                transform: transform,
                // レンダリング最適化オプション
                intent: 'display',
                enableWebGL: true,
                // 高品質テキストレンダリング
                textLayerMode: 0 // テキストレイヤーを無効化してパフォーマンス向上
            };

            // レンダリングタスクを作成
            const renderTask = page.render(renderContext);
            this.currentRenderTask = {
                task: renderTask,
                pageNumber: pageNumber,
                cancel: () => {
                    renderTask.cancel();
                    this.isRendering = false;
                }
            };

            await renderTask.promise;

            // レンダリング完了後、現在のページと一致する場合のみUI更新
            if (pageNumber === this.currentPage) {
                // アクティブな目次項目を更新
                this.updateActiveTocItem();

                // レンダリング時間をログ出力（開発用）
                const renderTime = performance.now() - startTime;
                console.log(`ページ ${pageNumber} レンダリング時間: ${renderTime.toFixed(2)}ms`);
            }

        } catch (error) {
            if (error.name === 'RenderingCancelledException') {
                console.log(`ページ ${pageNumber} のレンダリングがキャンセルされました`);
            } else {
                console.error('ページ描画エラー:', error);
                this.showDemoContent();
            }
        } finally {
            this.isRendering = false;
            this.currentRenderTask = null;
        }
    }

    showDemoContent() {
        // キャンバスサイズを設定（より大きく表示）
        const containerWidth = this.pdfViewerContainer.clientWidth - 20;
        const targetWidth = Math.max(800, Math.min(containerWidth * 0.9, 1200));
        const targetHeight = Math.max(1000, targetWidth * 1.3);
        
        this.canvas.width = targetWidth;
        this.canvas.height = targetHeight;
        this.canvas.style.width = targetWidth + 'px';
        this.canvas.style.height = targetHeight + 'px';

        // 背景
        this.ctx.fillStyle = '#ffffff';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // ヘッダー部分
        this.ctx.fillStyle = '#0066CC';
        this.ctx.fillRect(0, 0, this.canvas.width, 120);

        // メインタイトル
        this.ctx.fillStyle = '#ffffff';
        this.ctx.font = 'bold 36px "Noto Sans JP", sans-serif';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('情報科学専門学校', this.canvas.width / 2, 60);
        this.ctx.font = '24px "Noto Sans JP", sans-serif';
        this.ctx.fillText('学校案内 2026', this.canvas.width / 2, 95);

        // ページ情報
        this.ctx.fillStyle = '#333333';
        this.ctx.font = '18px "Noto Sans JP", sans-serif';
        this.ctx.fillText(`ページ ${this.currentPage} / ${this.totalPages || 57}`, this.canvas.width / 2, 160);

        // 学校の特色
        this.ctx.fillStyle = '#FF6600';
        this.ctx.font = 'bold 20px "Noto Sans JP", sans-serif';
        this.ctx.fillText('神奈川県初のIT専門学校（1983年創立）', this.canvas.width / 2, 200);

        // 学科一覧
        this.ctx.fillStyle = '#333333';
        this.ctx.font = '16px "Noto Sans JP", sans-serif';
        this.ctx.textAlign = 'left';

        const sections = [
            '🔒 情報セキュリティ学科（4年制）',
            '🤖 実践AI科（4年制）',
            '🎮 先端ITシステム科（3年制）',
            '💻 情報処理科（2年制）',
            '🌐 実践IoT科（2年制）',
            '🎨 Web技術科（2年制）',
            '📊 ビジネス科（2年制）',
            '📜 ITライセンス科（1年制）'
        ];

        sections.forEach((section, index) => {
            this.ctx.fillText(section, 60, 280 + (index * 40));
        });

        // 特徴・実績
        this.ctx.fillStyle = '#0066CC';
        this.ctx.font = 'bold 18px "Noto Sans JP", sans-serif';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('🚉 横浜駅から徒歩1分', this.canvas.width / 2, 680);
        this.ctx.fillText('📈 就職率98.9%', this.canvas.width / 2, 720);
        this.ctx.fillText('🏆 資格取得サポート充実', this.canvas.width / 2, 760);
        this.ctx.fillText('💼 大手企業への就職実績多数', this.canvas.width / 2, 800);

        // フッター
        this.ctx.fillStyle = '#666666';
        this.ctx.font = '14px "Noto Sans JP", sans-serif';
        this.ctx.fillText('岩崎学園 - 97年の教育実績', this.canvas.width / 2, 850);
        this.ctx.fillText('〒221-0835 横浜市神奈川区鶴屋町2-17', this.canvas.width / 2, 880);

        // デモ表示の場合の総ページ数設定
        if (!this.totalPages) {
            this.totalPages = 57;
            this.totalPagesSpan.textContent = this.totalPages;
            this.sidebarTotalPages.textContent = `${this.totalPages}ページ`;
            this.updateControls();
        }
        
        // 初期ズーム表示を更新
        this.updateZoomDisplay();
    }

    updateLoadStatus(status) {
        this.loadStatus.textContent = status;
    }

    // プログレスバーを更新
    updateProgress(percentage, text) {
        if (this.progressFill) {
            this.progressFill.style.width = `${Math.min(100, Math.max(0, percentage))}%`;
        }
        if (this.progressText && text) {
            this.progressText.textContent = text;
        }
    }

    updateActiveTocItem() {
        // 全ての目次リンクから active クラスを削除
        document.querySelectorAll('.toc-link').forEach(link => {
            link.classList.remove('active');
        });

        // 現在のページに対応する目次項目をアクティブにする
        const currentLink = document.querySelector(`[data-page="${this.currentPage}"]`);
        if (currentLink) {
            currentLink.classList.add('active');
        }
    }

    goToPage(pageNumber) {
        const newPage = Math.max(1, Math.min(pageNumber, this.totalPages || 57));
        if (newPage !== this.currentPage) {
            this.currentPage = newPage;
            this.pageInput.value = this.currentPage;
            
            // デバウンス処理で連続クリックを制御
            this.debouncedRenderPage(newPage);
            
            this.updateControls();
            this.updateFullscreenControls();
            this.updateLoadStatus(`📄 ページ ${this.currentPage} を表示中`);
            
            // ページ移動時に隣接ページをプリロード（遅延実行）
            setTimeout(() => this.preloadAdjacentPages(), 100);
        }
    }

    // デバウンス処理付きレンダリング
    debouncedRenderPage(pageNumber) {
        // 前回のタイマーをクリア
        if (this.renderTimeout) {
            clearTimeout(this.renderTimeout);
        }

        // 50ms後にレンダリング実行（連続操作を防ぐ）
        this.renderTimeout = setTimeout(() => {
            this.renderPage(pageNumber);
        }, 50);
    }

    nextPage() {
        this.goToPage(this.currentPage + 1);
    }

    prevPage() {
        this.goToPage(this.currentPage - 1);
    }

    firstPage() {
        this.goToPage(1);
    }

    lastPage() {
        this.goToPage(this.totalPages || 57);
    }

    zoomIn() {
        this.currentZoom = Math.min(this.currentZoom * 1.2, 5.0);
        this.scale = this.baseScale * this.currentZoom;
        this.renderPage(this.currentPage, true);
        this.updateZoomDisplay();
        this.updateLoadStatus('🔍 拡大表示中');
        this.updateCanvasClass();
    }

    zoomOut() {
        this.currentZoom = Math.max(this.currentZoom / 1.2, 0.3);
        this.scale = this.baseScale * this.currentZoom;
        this.renderPage(this.currentPage, true);
        this.updateZoomDisplay();
        this.updateLoadStatus('🔍 縮小表示中');
        this.updateCanvasClass();
    }

    setZoom(zoomLevel) {
        this.currentZoom = Math.max(0.3, Math.min(5.0, zoomLevel));
        this.scale = this.baseScale * this.currentZoom;
        this.renderPage(this.currentPage, true);
        this.updateZoomDisplay();
        this.updateCanvasClass();
    }

    updateZoomDisplay() {
        const percentage = Math.round(this.currentZoom * 100);
        if (this.zoomDisplay) {
            this.zoomDisplay.textContent = `${percentage}%`;
        }
        if (this.zoomLevelIndicator) {
            this.zoomLevelIndicator.textContent = `${percentage}%`;
        }
        
        // 全画面時の表示も更新
        const fullscreenZoomDisplay = document.getElementById('fullscreenZoomDisplay');
        if (fullscreenZoomDisplay) {
            fullscreenZoomDisplay.textContent = `${percentage}%`;
        }
    }

    updateCanvasClass() {
        if (this.currentZoom > 1.1) {
            this.canvas.classList.add('zoomable', 'zoomed');
        } else {
            this.canvas.classList.remove('zoomable', 'zoomed');
        }
    }

    fitToWidth() {
        // 幅に合わせる場合はより大きく表示
        this.currentZoom = 1.3;
        this.renderPage(this.currentPage, true);
        this.updateZoomDisplay();
        this.updateLoadStatus('📐 幅に合わせて表示');
        this.updateCanvasClass();
    }

    fitToPage() {
        // 全体表示でもデフォルトより大きく
        this.currentZoom = 1.1;
        this.renderPage(this.currentPage, true);
        this.updateZoomDisplay();
        this.updateLoadStatus('📱 全体表示');
        this.updateCanvasClass();
    }

    // 全画面表示機能
    toggleFullscreen() {
        if (this.isFullscreen) {
            this.exitFullscreen();
        } else {
            this.enterFullscreen();
        }
    }

    enterFullscreen() {
        this.isFullscreen = true;
        this.pdfViewerContainer.classList.add('fullscreen');
        
        // 全画面API使用（対応ブラウザ）
        if (this.pdfViewerContainer.requestFullscreen) {
            this.pdfViewerContainer.requestFullscreen().catch(console.warn);
        } else if (this.pdfViewerContainer.webkitRequestFullscreen) {
            this.pdfViewerContainer.webkitRequestFullscreen();
        } else if (this.pdfViewerContainer.mozRequestFullScreen) {
            this.pdfViewerContainer.mozRequestFullScreen();
        }

        // 全画面時のページ情報を更新
        this.updateFullscreenControls();
        
        // レンダリングし直し（画面サイズが変わったため）
        setTimeout(() => {
            this.renderPage(this.currentPage, true);
        }, 100);

        this.updateLoadStatus('🔲 全画面表示中');
    }

    exitFullscreen() {
        this.isFullscreen = false;
        this.pdfViewerContainer.classList.remove('fullscreen');
        
        // 全画面API終了
        if (document.exitFullscreen) {
            document.exitFullscreen().catch(console.warn);
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        }

        // レンダリングし直し
        setTimeout(() => {
            this.renderPage(this.currentPage, true);
        }, 100);

        this.updateLoadStatus('📄 通常表示');
    }

    updateFullscreenControls() {
        const fullscreenCurrentPage = document.getElementById('fullscreenCurrentPage');
        const fullscreenTotalPages = document.getElementById('fullscreenTotalPages');
        
        if (fullscreenCurrentPage) {
            fullscreenCurrentPage.textContent = this.currentPage;
        }
        if (fullscreenTotalPages) {
            fullscreenTotalPages.textContent = this.totalPages || 57;
        }
    }

    updateControls() {
        const isFirstPage = this.currentPage === 1;
        const isLastPage = this.currentPage === (this.totalPages || 57);

        document.getElementById('firstPageBtn').disabled = isFirstPage;
        document.getElementById('prevPageBtn').disabled = isFirstPage;
        document.getElementById('nextPageBtn').disabled = isLastPage;
        document.getElementById('lastPageBtn').disabled = isLastPage;

        this.pageInput.max = this.totalPages || 57;
    }

    showError(message) {
        this.loadingIndicator.innerHTML = `
            <div style="color: var(--error); font-size: 24px;">⚠️</div>
            <div class="loading-text" style="color: var(--error);">${message}</div>
            <div class="loading-subtext">デモ表示に切り替えています...</div>
        `;

        this.updateLoadStatus('⚠️ PDFの読み込みに失敗 - デモ表示中');

        setTimeout(() => {
            this.loadingIndicator.style.display = 'none';
            this.canvas.style.display = 'block';
            this.canvas.classList.add('fade-in');
            this.totalPages = 57; // デモ用総ページ数
            this.totalPagesSpan.textContent = this.totalPages;
            this.sidebarTotalPages.textContent = `${this.totalPages}ページ（デモ）`;
            this.showDemoContent();
            this.updateControls();
        }, 2000);
    }

    initializeEventListeners() {
        // ページ移動ボタン
        document.getElementById('firstPageBtn').addEventListener('click', () => this.firstPage());
        document.getElementById('prevPageBtn').addEventListener('click', () => this.prevPage());
        document.getElementById('nextPageBtn').addEventListener('click', () => this.nextPage());
        document.getElementById('lastPageBtn').addEventListener('click', () => this.lastPage());

        // ズームボタン
        document.getElementById('zoomInBtn').addEventListener('click', () => this.zoomIn());
        document.getElementById('zoomOutBtn').addEventListener('click', () => this.zoomOut());
        document.getElementById('fitWidthBtn').addEventListener('click', () => this.fitToWidth());
        document.getElementById('fitPageBtn').addEventListener('click', () => this.fitToPage());
        
        // 全画面ボタン
        document.getElementById('fullscreenBtn').addEventListener('click', () => this.toggleFullscreen());
        
        // 全画面時のコントロール
        document.getElementById('fullscreenPrevBtn').addEventListener('click', () => this.prevPage());
        document.getElementById('fullscreenNextBtn').addEventListener('click', () => this.nextPage());
        document.getElementById('fullscreenZoomInBtn').addEventListener('click', () => this.zoomIn());
        document.getElementById('fullscreenZoomOutBtn').addEventListener('click', () => this.zoomOut());
        document.getElementById('exitFullscreenBtn').addEventListener('click', () => this.exitFullscreen());

        // ページ入力
        this.pageInput.addEventListener('change', (e) => {
            const pageNumber = parseInt(e.target.value);
            if (!isNaN(pageNumber)) {
                this.goToPage(pageNumber);
            }
        });

        this.pageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                const pageNumber = parseInt(e.target.value);
                if (!isNaN(pageNumber)) {
                    this.goToPage(pageNumber);
                }
            }
        });

        // 目次リンク
        document.querySelectorAll('.toc-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const pageNumber = parseInt(e.target.dataset.page);
                this.goToPage(pageNumber);
                this.closeMobileMenu();
            });
        });

        // キーボードショートカット
        document.addEventListener('keydown', (e) => {
            // 入力フィールドにフォーカスがある場合は無視
            if (e.target.tagName === 'INPUT') return;

            switch (e.key) {
                case 'ArrowLeft':
                case 'ArrowUp':
                case 'PageUp':
                    e.preventDefault();
                    this.prevPage();
                    break;
                case 'ArrowRight':
                case 'ArrowDown':
                case 'PageDown':
                case ' ': // スペースキー
                    e.preventDefault();
                    this.nextPage();
                    break;
                case 'Home':
                    e.preventDefault();
                    this.firstPage();
                    break;
                case 'End':
                    e.preventDefault();
                    this.lastPage();
                    break;
                case '+':
                case '=':
                    e.preventDefault();
                    this.zoomIn();
                    break;
                case '-':
                case '_':
                    e.preventDefault();
                    this.zoomOut();
                    break;
                case 'f':
                case 'F':
                    if (e.ctrlKey || e.metaKey) {
                        // Ctrl+F は通常の検索として動作
                        return;
                    }
                    e.preventDefault();
                    if (e.shiftKey) {
                        this.toggleFullscreen();
                    } else {
                        this.fitToPage();
                    }
                    break;
                case 'w':
                case 'W':
                    e.preventDefault();
                    this.fitToWidth();
                    break;
                case 'Escape':
                    if (this.isFullscreen) {
                        e.preventDefault();
                        this.exitFullscreen();
                    }
                    break;
            }
        });

        // リサイズ対応
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                this.renderPage();
            }, 250);
        });

        // マウスホイールでのズーム（Ctrl押下時）
        this.canvas.addEventListener('wheel', (e) => {
            if (e.ctrlKey || e.metaKey) {
                e.preventDefault();
                if (e.deltaY < 0) {
                    this.zoomIn();
                } else {
                    this.zoomOut();
                }
            }
        });
    }

    initializeMobileMenu() {
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('overlay');

        menuToggle.addEventListener('click', () => {
            this.toggleMobileMenu();
        });

        overlay.addEventListener('click', () => {
            this.closeMobileMenu();
        });

        // ESCキーでメニューを閉じる
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeMobileMenu();
            }
        });
    }

    toggleMobileMenu() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('overlay');

        sidebar.classList.toggle('open');
        overlay.classList.toggle('active');

        // アクセシビリティ
        const isOpen = sidebar.classList.contains('open');
        document.getElementById('menuToggle').setAttribute('aria-expanded', isOpen);
    }

    closeMobileMenu() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('overlay');

        sidebar.classList.remove('open');
        overlay.classList.remove('active');

        document.getElementById('menuToggle').setAttribute('aria-expanded', 'false');
    }
}

// アプリケーション開始
document.addEventListener('DOMContentLoaded', () => {
    // フォントの読み込み完了を待つ
    if (document.fonts && document.fonts.ready) {
        document.fonts.ready.then(() => {
            new ISCPDFViewer();
        });
    } else {
        new ISCPDFViewer();
    }
});

// サービスワーカー登録（オフライン対応）
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        // サービスワーカーの登録はオプション
        console.log('Service Worker機能が利用可能です');
    });
}